import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:logging/logging.dart';

class ApiService {
  final _logger = Logger('ApiService');
  final String baseUrl;
  final Map<String, String> _headers = {'Content-Type': 'application/json'};

  ApiService({required this.baseUrl}) {
    _logger.info('üåê API Service initialized with base URL: $baseUrl');
  }

  void setAuthToken(String token) {
    _headers['Authorization'] = 'Bearer $token';
    _logger.info('üîë Auth token set in headers');
  }

  Future<Map<String, dynamic>> get(String endpoint) async {
    final url = Uri.parse('$baseUrl$endpoint');
    _logger.info('üì° GET request to: $url');
    _logger.info('Request headers: $_headers');

    try {
      final response = await http.get(
        url,
        headers: _headers,
      );
      return _handleResponse(response);
    } catch (e) {
      _logger.severe('‚ùå GET $endpoint error: $e');
      rethrow;
    }
  }

  Future<Map<String, dynamic>> post(
      String endpoint, Map<String, dynamic> body) async {
    final url = Uri.parse('$baseUrl$endpoint');

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    _logger.info('‚¨ÜÔ∏è –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°:');
    _logger.info('URL: $url');
    _logger.info('–ú–µ—Ç–æ–¥: POST');
    _logger.info('–ó–∞–≥–æ–ª–æ–≤–∫–∏: $_headers');
    _logger.info('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: ${json.encode(body)}');

    try {
      final response = await http
          .post(
            url,
            headers: _headers,
            body: json.encode(body),
          )
          .timeout(const Duration(seconds: 10));

      // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      _logger.info('\n‚¨áÔ∏è –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢:');
      _logger.info('–°—Ç–∞—Ç—É—Å: ${response.statusCode}');
      _logger.info('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.headers}');
      _logger.info('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      return _handleResponse(response);
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:');
      _logger.severe('$e');
      _logger.severe('Stack trace: $stackTrace');
      if (e is http.ClientException) {
        _logger.severe('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${e.message}');
      }
      rethrow;
    }
  }

  Map<String, dynamic> _handleResponse(http.Response response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
      try {
        if (response.body.trim().startsWith('<!DOCTYPE html>')) {
          _logger.severe('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON');
          _logger.severe('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:');
          _logger.severe(response.body);
          throw ApiException(
            statusCode: response.statusCode,
            message:
                '–ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞.',
          );
        }

        final decoded = json.decode(utf8.decode(response.bodyBytes));
        _logger.info('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:');
        _logger.info(json.encode(decoded));
        return decoded;
      } catch (e) {
        _logger.severe('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:');
        _logger.severe('–¢–∏–ø –æ—à–∏–±–∫–∏: ${e.runtimeType}');
        _logger.severe('–°–æ–æ–±—â–µ–Ω–∏–µ: $e');
        _logger.severe('Content-Type: ${response.headers['content-type']}');
        _logger.severe('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:');
        _logger.severe(response.body);
        throw ApiException(
          statusCode: response.statusCode,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: ${e.toString()}',
        );
      }
    } else {
      _logger.severe('‚ùå –û–®–ò–ë–ö–ê HTTP ${response.statusCode}');
      _logger.severe('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:');
      _logger.severe(response.body);
      throw ApiException(
        statusCode: response.statusCode,
        message: response.body,
      );
    }
  }
}

class ApiException implements Exception {
  final int statusCode;
  final String message;

  ApiException({required this.statusCode, required this.message});

  @override
  String toString() => 'ApiException: $statusCode - $message';
}
