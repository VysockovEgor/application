import 'api_service.dart';
import '../models/user.dart';
import 'package:logging/logging.dart';
import 'dart:convert';

class UserService {
  final _logger = Logger('UserService');
  final ApiService _api;
  static const String _profileEndpoint = '/api/user/profile';
  static const String _loginEndpoint = '/api/auth/login';
  static const String _registerEndpoint = '/api/register';
  static const String _resetPasswordEndpoint = '/api/reset-password';

  UserService(this._api);

  Future<String> login(String login, String password) async {
    _logger.info('üëâ –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ login');
    _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç: $_loginEndpoint');

    final requestBody = {
      'login': login,
      'password': password,
    };
    _logger.info('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: ${json.encode(requestBody)}');

    final response = await _api.post(_loginEndpoint, requestBody);
    _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    return response['token'] as String;
  }

  Future<User> getProfile() async {
    _logger.info('üì± –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    final response = await _api.get(_profileEndpoint);
    final user = User.fromJson(response);
    _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: $user');
    return user;
  }

  Future<void> register({
    required String login,
    required String password,
    required String email,
    required String name,
  }) async {
    await _api.post(_registerEndpoint, {
      'login': login,
      'password': password,
      'email': email,
      'name': name,
    });
  }

  Future<void> resetPassword(String email) async {
    await _api.post(_resetPasswordEndpoint, {
      'email': email,
    });
  }
}
